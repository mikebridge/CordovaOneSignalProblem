{"version":3,"file":"nfc-com-protocol.js","sourceRoot":"","sources":["../src/www/nfc-com-protocol.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAOA,gGAA6F;AAE7F,oFAAkF;AAClF,6BAAwC;AAExC,mCAAiC;AACjC,6DAAwE;AACxE,mCAAoC;AAIpC;IAAoC,kCAAgB;IAEhD,wBAAY,OAUX;QAVW,wBAAA,EAAA;YACR,OAAO,EAAE;gBACL,OAAO,EAAE,IAAI;aAChB;YACD,UAAU,EAAE;gBACR,OAAO,EAAE,IAAI;aAChB;YACD,IAAI,EAAE;gBACF,OAAO,EAAE,IAAI;aAChB;SACJ;QAVD,YAWI,iBAAO,SAKV;QAJG,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,OAAO,GAAG,IAAI,SAAS,EAAE;YACzB,OAAO,CAAC,IAAI,CAAC,4EAA4E,CAAC,CAAC;SAC9F;;IACL,CAAC;IAEa,0BAAW,GAAzB;QACI,OAAO,IAAI,cAAc,CAAC;YACtB,OAAO,EAAE;gBACT,OAAO,EAAE,KAAK;aACb;YACD,UAAU,EAAE;gBACV,OAAO,EAAE,IAAI;aACd;YACD,IAAI,EAAE;gBACJ,OAAO,EAAE,IAAI;aACd;SACF,CAAC,CAAA;IACR,CAAC;IAED,iCAAQ,GAAR,UAAS,OAAmC;QACxC,cAAK,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QAC3B,IAAI,cAAc,GAAG,GAAG,CAAC,OAAO,CAAC,uBAAuB,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;QACvF,OAAO,WAAI,CAAC,cAAc,CAAC,CAAC;IAChC,CAAC;IAED,oCAAW,GAAX,UAAY,OAAsC;QAC9C,OAAO,WAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;IAC7B,CAAC;IAED,8BAAK,GAAL,UAAM,IAAgB;QAClB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC/C,CAAC;IAED,6BAAI,GAAJ;QACI,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC/C,CAAC;IAED,6BAAI,GAAJ,UAAK,IAAgB,EAAE,OAAgC;QAAvD,iBAuBC;QAtBG,IAAI,OAAO,GAAG,GAAG;aACZ,UAAU,CAAC,4BAAY,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;aAC1C,IAAI,CAAC,UAAC,QAAgB;YACnB,IAAI,OAAO,QAAQ,IAAI,QAAQ,EAAE;gBAC7B,MAAM,iBAAQ,CAAC,aAAa,CAAC,4DAA4D,CAAC,CAAC;aAC9F;YACD,cAAK,CAAC,uBAAuB,EAAE,QAAQ,CAAC,CAAA;YACxC,OAAO,4BAAY,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAA;QACnD,CAAC,CAAC;aACD,KAAK,CAAC,UAAC,SAAS;YACb,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;gBAC/B,IAAI,KAAK,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;gBACrC,IAAI,KAAK,CAAC,IAAI,KAAK,iBAAQ,CAAC,SAAS,CAAC,iBAAiB,IAAI,KAAK,CAAC,IAAI,KAAK,iBAAQ,CAAC,SAAS,CAAC,YAAY,EAAE;oBACvG,KAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;iBACjC;gBACD,MAAM,KAAK,CAAC;aACf;iBACI;gBACD,MAAM,SAAS,CAAC;aACnB;QACL,CAAC,CAAC,CAAC;QACP,OAAO,WAAI,CAAC,OAAO,CAAC,CAAC;IACzB,CAAC;IAED,0CAAiB,GAAjB,UAAkB,KAAe;QAC7B,IAAI,IAAI,CAAC,eAAe,KAAK,qBAAe,CAAC,YAAY,EAAE;YACvD,IAAI,CAAC,kBAAkB,CAAC,qBAAe,CAAC,YAAY,CAAC,CAAC;SACzD;IACL,CAAC;IAEL,qBAAC;AAAD,CAAC,AAnFD,CAAoC,qCAAgB,GAmFnD;AAnFY,wCAAc;AAmF1B,CAAC;AAUF,SAAS,aAAa,CAAC,SAAiB;IACpC,IAAI,WAAW,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;IAC1C,IAAI,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;QAC1C,OAAO,iBAAQ,CAAC,YAAY,EAAE,CAAC;KAClC;SACI,IAAI,WAAW,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;QAChD,OAAO,iBAAQ,CAAC,iBAAiB,EAAE,CAAC;KACvC;SACI;QACD,OAAO,iBAAQ,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;KAC3C;AACL,CAAC","sourcesContent":["//\r\n//  Copyright 2018 IoTize SAS Inc.  Licensed under the MIT license. \r\n//\r\n//  ble-com-protocol.ts\r\n//  device-com-ble.cordova BLE Cordova Plugin\r\n//\r\n\r\nimport { QueueComProtocol } from '@iotize/device-client.js/protocol/impl/queue-com-protocol';\r\nimport { ComProtocolConnectOptions, ComProtocolDisconnectOptions, ComProtocolSendOptions, ComProtocolOptions } from '@iotize/device-client.js/protocol/api/com-protocol.interface';\r\nimport { FormatHelper } from '@iotize/device-client.js/core/format/format-helper';\r\nimport { from, Observable } from 'rxjs';\r\nimport { CordovaInterface } from './cordova-interface';\r\nimport { debug } from './logger';\r\nimport { ConnectionState } from '@iotize/device-client.js/protocol/api';\r\nimport { NfcError } from './errors';\r\n\r\ndeclare var nfc: CordovaInterface;\r\n\r\nexport class NFCComProtocol extends QueueComProtocol {\r\n\r\n    constructor(options: ComProtocolOptions = {\r\n        connect: {\r\n            timeout: 2000\r\n        },\r\n        disconnect: {\r\n            timeout: 1000\r\n        },\r\n        send: {\r\n            timeout: 1000\r\n        }\r\n    }) {\r\n        super();\r\n        this.options = options;\r\n        if (typeof nfc == undefined) {\r\n            console.warn(\"NFC plugin has not been setup properly. Global variable NFC does not exist\");\r\n        }\r\n    }\r\n\r\n    public static iOSProtocol(): NFCComProtocol {\r\n        return new NFCComProtocol({\r\n            connect: {\r\n            timeout: 10000 // bigger timer on connect as connect launches a reading session\r\n            },\r\n            disconnect: {\r\n              timeout: 1000\r\n            },\r\n            send: {\r\n              timeout: 1000\r\n            }\r\n          })\r\n    }\r\n\r\n    _connect(options?: ComProtocolConnectOptions): Observable<any> {\r\n        debug('_connect', options);\r\n        let connectPromise = nfc.connect(\"android.nfc.tech.NfcV\", this.options.connect.timeout)\r\n        return from(connectPromise);\r\n    }\r\n\r\n    _disconnect(options?: ComProtocolDisconnectOptions): Observable<any> {\r\n        return from(nfc.close());\r\n    }\r\n\r\n    write(data: Uint8Array): Promise<any> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    read(): Promise<Uint8Array> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    send(data: Uint8Array, options?: ComProtocolSendOptions): Observable<Uint8Array> {\r\n        let promise = nfc\r\n            .transceive(FormatHelper.toHexString(data))\r\n            .then((response: string) => {\r\n                if (typeof response != \"string\") {\r\n                    throw NfcError.internalError(`Internal error. Plugin should respond a hexadecimal string`);\r\n                }\r\n                debug('NFC plugin response: ', response)\r\n                return FormatHelper.hexStringToBuffer(response)\r\n            })\r\n            .catch((errString) => {\r\n                if (typeof errString === \"string\") {\r\n                    let error = stringToError(errString);\r\n                    if (error.code === NfcError.ErrorCode.NotConnectedError || error.code === NfcError.ErrorCode.TagLostError) {\r\n                        this._onConnectionLost(error);\r\n                    }\r\n                    throw error;\r\n                }\r\n                else {\r\n                    throw errString;\r\n                }\r\n            });\r\n        return from(promise);\r\n    }\r\n\r\n    _onConnectionLost(error: NfcError) {\r\n        if (this.connectionState !== ConnectionState.DISCONNECTED) {\r\n            this.setConnectionState(ConnectionState.DISCONNECTED);\r\n        }\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * Convert error string returned by the plugin into an error object\r\n * It only checks a few Android error string for now\r\n * \r\n * TODO complete implementation with other error types\r\n * \r\n * @param errString \r\n */\r\nfunction stringToError(errString: string): NfcError {\r\n    let errStringLc = errString.toLowerCase();\r\n    if (errStringLc.indexOf('tag was lost') >= 0) {\r\n        return NfcError.tagLostError();\r\n    }\r\n    else if (errStringLc.indexOf('not connected') >= 0) {\r\n        return NfcError.notConnectedError();\r\n    }\r\n    else {\r\n        return NfcError.unknownError(errString);\r\n    }\r\n}\r\n"]}